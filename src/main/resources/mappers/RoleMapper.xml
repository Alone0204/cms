<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xxxx.cms.dao.RoleMapper" >

  <resultMap id="BaseResultMap" type="com.xxxx.cms.vo.Role" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="role_name" property="roleName" jdbcType="VARCHAR" />
    <result column="role_remark" property="roleRemark" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="is_valid" property="isValid" jdbcType="INTEGER" />
  </resultMap>

  <sql id="Base_Column_List" >
    id, role_name, create_time, update_time, is_valid
  </sql>

  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_role
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_role
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.xxxx.cms.vo.Role" >
    insert into t_role (id, role_name, role_remark, 
      create_date, update_date, is_valid
      )
    values (#{id,jdbcType=INTEGER}, #{roleName,jdbcType=VARCHAR}, #{roleRemark,jdbcType=VARCHAR}, 
      #{createDate,jdbcType=TIMESTAMP}, #{updateDate,jdbcType=TIMESTAMP}, #{isValid,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.xxxx.cms.vo.Role" >
    insert into t_role
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="roleName != null" >
        role_name,
      </if>
      <if test="roleRemark != null" >
        role_remark,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="isValid != null" >
        is_valid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="roleName != null" >
        #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isValid != null" >
        #{isValid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.xxxx.cms.vo.Role" >
    update t_role
    <set >
      <if test="roleName != null" >
        role_name = #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="roleRemark != null" >
        role_remark = #{roleRemark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isValid != null" >
        is_valid = #{isValid,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xxxx.cms.vo.Role" >
    update t_role
    set role_name = #{roleName,jdbcType=VARCHAR},
      role_remark = #{roleRemark,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      is_valid = #{isValid,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!-- 查询所有的⻆⾊ -->
  <select id="queryAllRoles" parameterType="int" resultType="java.util.Map">
   SELECT
	r.id,
	r.role_name AS roleName,
    CASE
        WHEN IFNULL(temp.id,0) = 0 THEN
        '' ELSE 'selected'
        END AS 'selected'
    FROM
        t_role r
        LEFT JOIN ( SELECT r.id FROM t_role r LEFT JOIN t_user_role ur ON r.id = ur.role_id WHERE user_id = #{userId} ) temp ON r.id = temp.id
    WHERE
        r.is_valid = 1
  </select>
  <select id="queryUserHasRole" resultType="java.lang.Integer">
    select DISTINCT acl_value from t_perm where role_id in (select r.id from t_role r LEFT JOIN t_user_role ur on ur.role_id = r.id where user_id = #{userId})
  </select>

  <!--根据用户ID查询角色记录-->
  <select id="countUserRoleByUserId" parameterType="int" resultType="java.lang.Integer">
    select
        count(1)
    from
        t_user_role
    where
        user_id = #{userId}
  </select>

  <!--根据用户ID删除角色记录-->
  <delete id="deleteUserRoleByUserId" parameterType="int">
    delete from
        t_user_role
    where
        user_id = #{userId}
  </delete>

  <!-- 批量添加用户角色 -->
  <insert id="insertUserRole">
    insert into
    t_user_role (user_id,role_id,create_date,update_date)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.userId},#{item.roleId},now(),now())
    </foreach>
  </insert>

  <select id="selectByParams" parameterType="com.xxxx.cms.query.RoleQuery" resultMap="BaseResultMap">
    select <include refid="Base_Column_List"/>
    from t_role
    <where>
      is_valid=1
      <if test="null !=roleName and roleName !=''">
        and role_name like concat('%',#{roleName},'%')
      </if>
    </where>
  </select>

  <select id="selectByRoleName" parameterType="string" resultType="com.xxxx.cms.vo.Role">
    select <include refid="Base_Column_List"/>
    from t_role where is_valid=1 and role_name=#{roleName}
  </select>

</mapper>